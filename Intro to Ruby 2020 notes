# -- Ruby Comment -- #
=begin
  anything in between is commented code
  not popular
=end

Atom shortcut:
  1. highlight section with SHIFT
  2. CMD "/" to comment out entire block, repeat to uncomment

  # ---Install Ruby on Mac ---#
  RVM: Ruby Version Manager: rvm.io
  \curl -sSL https://get.rvm.io | bash -s stable --rails

  # --- using homebrew --- #
    brew install Ruby # same result as rvm

    # -- modify bash -- #
    open ~/.bash_profile
    source /Users/eparas3263/.rvm/scripts/rvm

    # ---get ruby docs ---#
    rvm docs generate-ri

    # ---Install Atom and Atom Runner--- #
    Atom -> Preferences ->Settings->install->Atom-Runner
    CTRL+R: runs code

    # -- run Ruby from Terminal--- #
    ruby <file.rb>
    irb = interactive ruby

# --- puts method --- #
puts = output to screen, adds line break at end
  Examples:
  puts "Hello World";  # --- semicolon not required --- #
  puts 5       # --- number --- #
  puts 3.14159 # --- floating point number --- #
  puts  # --- adds a line break --- #

# --- print method --- #
print = output to screen, but doesn't add line break at end

# --- p method --- #
p = displays literal output
  examples: puts "Hello World" -> Hello World
            p  "Hello World" -> "Hello World"
            " Hi there, this is a\nline break"

# ---Basic Aritemetic.rb--- #
examples:
   p 1 + 4 -> 5
   p "School" + "Bus" -> SchoolBus
   p 10/5 -> 2
   p 12/5 -> 2   # --integer result only--- #
   p 12/5.0 -> 2.4  # ---floating point result--- #
      p 12.0/5
      p 12.0/5
      p 0.5/2
   p 3 ** 3 -> 27 # ---exponent--- #
   p 5 % 2 -> 1 # ---modulo (remainder)--- %

# ---variables--- #
examples:
  name = "Boris"
  last_name ="Badanov"
  cartoon = true
  age = 97
- spaces not allowed, use underscores
- case sensitive
- do not use Ruby reserved key words as variable names

# ---parallel variable assignments--- #
example:
a, b, c = 10, 20, 30 # --- assigns values to multiple variables in order entered
---
a, b = 1 , 2
a, b = b, a # ---swaps values between variables--- #
---
p a, b, c -> outputs values with line breaks
print a, b, c -> 102030 # ---no line breaks or spaces--- #

# ---Constants--- #
examples:
    NAME = "constant value" #---uppercase---#
    PI = 3.141519
      # ---Ruby allows changing values of constants, gives warning--- #

# ---Object Methods--- #
examples:
  p "Hello world".length -> 11 # ---len function--- #
  p "Hello world".upcase -> "HELLO WORLD"
---
greetings = "hello World"
greetings.length -> 11
greetings.upcase -> "HELLO WORLD"
p 10.next -> 11    # ---adds 1 to current value--- #
p -1.next -> 0
puts "Hello World".inspect ->"Hello World"

# ---Return vales and nil---#
nil = obj that represents nothing

# --String interpolation--- #
examples:
  p 5.to_s -> "5" # ---converts to string--- #
  ---
  name = "Hera"
  p "Hello #{name}, how are you?"
  ---
  age = 25;
  p "I am " + age.to_s + " dog years old."
  p "I am #{age} dog years old."  # ---cleaner method--- #
  p "Adding 2 +2 = #{2+2}"
  p "In 5 years I will be #{age +5}"

  # --- gets Method and champ Method --- #
  gets = get string from User and adds line break
  chomp = removes new line character
  example:
    name = gets.chomp
    p "Hello #{name}. Now go away."
  ---
  puts "Enter your name: "
  name = gets.chomp
  puts "Enter your age: "
  age = gets.chomp.to_i   # ---converts string to integer--- #
  p "Hello #{name}. You are #{age} years old? Go away, old fart."

  # ---Numbers and Booleans--- #
  Examples:
    p 5.class -> Finum (Fixed number)
    p 999999999999999.class -> Bignum (Big Number)
    p 5 < 10 -> true
    p 20 < 5 -> false


# ---String to Number Conversion--- #
Examples:
  str ="5"
  p str.to_i.class -> Finum
  p str.to_f.class -> floating
  ---
  number = 10
  p number.to_s.class -> string
  p number.to_f.class -> float
  ---
  pi = 3.14
  p pi.to_i -> 3
  p pi.to_i.class -> Fixnum

  # ---Odd/Even--- #
  Examples:
  p 10.odd? -> false
  p 10.even? -> true
  p 2.99.odd? -> error

  # ---Equality/Inequality---#
  Examples:
  p 10 == 10 -> true
  p 10 != 5 -> true
  p 10 != 10 -> false

  # ---Less than/Greater than--- #
  Examples:
  p 1 < 8 -> true
  p 1 <= 5 -> true
  p 5 >= 10 -> false

  # ---Arithmetic Methods/Basic Arguments--- #
  Examples:
  p 1.next()  #--- parenthesis optional, unless arguments required)
  +, -, *, %, /
  p 10.div(5) -> 2

  # ---Object Methods with Parameters--- #
  Examples:
  3.between?(1, 5) -> true
  'cat'.between?('ant', 'dog') -> true  # ---alphabetical sort---#
  'gnu'.between?('ant', 'dog') -> false

  # --Float Methods--- #
  Examples:
  p 10.5.floor -> 10
  p 10.5.ceil -> 11
  p 3.14159.round -> 3
  p 3.6.round -> 4
  p 3.141519.round(2) -> 3.14 #--- argument = # digits
  p 35.67.abs -> 35.67
  p -35.67.abs -> 35.67

  # ---Assignments/Reassignments---#
  Examples:
  a = 10
  a = a + 5 -> 15
  a += 5 -> 15  # ---refactored code--- #
  ---
  b =50
  b -= 10 -> 40

  # ---Blocks with.times Method--- #
  - block is not an Object
  Examples:
  5.times {puts "Everything is awesome!"} # ---prints 5x--- #
  ---
  3.times do
     puts "Awesome-sauce!"        # ---multiple lines--- #
     puts " Poopie."
  end
  ---
  3.times do |count|    # ---block variable---#
    puts "loop number #{count}"   # ---starts at zero--- #
    puts "Looper"
   end
  ---
  5.times { |count| puts "Everything is awesome! #{count}"} # ---add block variable--- #
  ---
  10.times do |count|    # ---block variable---#
    puts "multiples of 3: #{3 * (count +1)}"
    end

    # ---.upto/.downto Methods--- #
    Examples:
    5.downto(1)    # ---counts down 5 to 1--- #
    5.downto(1) {|count| puts "Countdown: #{count}"}
    ---
    5.downto(0) do |i|
      p "Number: #{i}"
    end
    --
    5.upto(10) do |i|
          p "Number: #{i}"
          end

# ---.step Method--- #
Examples:
  1.step(100, 5) {|i| puts i}    #---end #, step size--- #
  ---
  0.step(85, 7) do |i|
    puts "Step 7: #{i}"
  end

# ---Strings--- #
Examples:
  puts "This is a String"    # ---double quotes--- #
  name = "Hera"
  age = 10
  puts name, age #--prints both variables
  ---
  name = String.new("Hera")  # ---another way to create string var--- #

# ---Multi-line String--- #
Examples:
  words = <<MLS
   multi-line string
   no quotes required.

        Tabs!

  MLS

# ---Escape Characters--- #
Examples:
puts "Hera says 'go away' to everyone"   # ---note position of quotes--- #
puts 'Hera says "wut" to everyone'
puts "Hera says "zzz" to everyone"  # ---will crash Ruby--- #
puts "Hera says \"zzz\" to everyone."  # ---escape characters \" will work--- #
puts 'Hera says \'woof\' to everyone.' # ---same result--- #
---
puts "Add a line break \n right here."
puts "\tGive me a tab."
puts "Hello\nWorld"  # --2x quotes required for escape chars--- #
puts 'Hello\nWorld'  # ---single quotes won't work--- #

# ---Equality/Inequality with Strings--- #
Examples:
a = "Hello"
b = "hello"
c = "Hello"

p a == b -> false
p a == c -> true
p b == c -> false
---
p "Apple" < "Banana" ->true   # ---alphabetical sort---#
p "A" < "a" -> true

# ---Concatenate Strings--- #
Examples:
fn ="Carlos"
ln ="Spiceywiener"

p fn + ln -> CarlosSpiceywiener  # ---no spaces---"
fn += fn + ln ->  "CarlosSpiceywiener"
p fn.concat(ln) -> # ---same result--- #
P fn << ln ->      # ---same result (shovel operator
---
fn.prepend(ln) -> SpiceywienerCarlos   # ---overwrites--- #

# ---length and size Method--- #
Examples:
  a.length    # ---returns number of chars in string--- #
  b.size      # ---same result--- #

# ---Extract Single Chars from Strings--- #
Examples:
    free_text = "A long time ago, in a galaxy far, far, away..."
    free_text. length
    p free_text[3] -> o  # ---index position starts at zero---#
    p free_text.slice(3) -> same result
    p free_text[-4] -> # ---start from end of string---#

# --Extract Multiple Chars from String--- #
Examples:
  p story [5, 4]    # ---[index start, # of chars to extract]--- #
  p story.slice (5,4) -> same result
  p story[-7, 5]   # ---start from end of string--- #
  p story.slice(-7, 5) -> same result

# ---Extract Multiple Chars with Range--- #
Examples:
  p story[27..39]  # ---index start..include index finish (..)--- #
  p story.slice)27...39) # ---do not include index finish (...)--- #
  p story[25..-9] # --index start..start from end of string of end index---#
  p story.slice(25..-9) -> same result

# ---Overwrite Chars in Strings--- #
Examples:
  story[0] ="p"    # ---changes char at index 0 to "p"--- #
  story[7, 4] = "new text"
  story[7..10] = "even newer text"

# ---Case Methods--- #
Examples:
  text.capitalize -> capitalize only first char, lowercase everything else
  text.capitalize.class -> String
  text.upcase -> # ---ALL CAPS--- #
  text.downcase -> # ---lowercase--- #
  text.swapcase -> # ---switch cases per char--- #

  # ---Reverse Method--- #
  Examples:
    text.reverse   # ---reverses order of text-- #

# ---Bang Method--- #
Examples:
  - modifies or mutates
  word.capitalize   # ---doesn't save modification--- #
  word = word.capitalize  # ---saves new state--- #
  word.capitalize! ->same result
  word.upcase! # --saves new state--- #

# ---.include? Method--- #
Examples:
    name.include?("S")  # ---if "S" included in string -> true--- #

# ---.empty? and .nil? Methods--- #
Examples:
  text.empty? # --if len=0 then true--- #
  text.nil? # ---if string = nil then true--- #

<<<<<<< HEAD
# ---Intro to Methods--- #
Examples:
    - DRY: Don't Repeat Yourself!
    - Methods are designed to be reused.

def destroy_death_star
  # ---do stuff here--- #
  # ---do more stuff-- #
end

destroy_death_star    # ---call method (function)--- #

# ---Local Variables--- #
  - aka scope
  - if defined in method, it is local to the method (not global)

# ---Parameters and Arguments--- #
Examples:
    def destroy_death_star (callsign)
      puts "#{callsign}, standing by."
    end

destroy_death_star("Red Five")

# ---Return Values--- #
Examples:

def add_two_numbers(num1, num2)
  puts"the answer is: "
  return num1 + num2
end

p add_two_numbers(6,7)
---
def return_guess
  puts "what will happen"
end

result =return_guess
p result

  - puts always return nil

# ---If statement--- #
=======
>>>>>>> 838f0a9d843957baf16b37b3b4c7099cc038c61f
# ---07 JAN 2020---#

# ---Conditionals--- #
Examples:
  if Condition
    # do stuff
  end
---
if Conditional
  # do stuff
elseif conditional-2
  # do more stuff
end
---
if conditional
  # do stuff
elseif conditional
  # do stuff
else
  # do stuff if all else fails
end
# ---Multiple conditionals--- #
Example:
  if conditional && conditional   # ---AND--- #
    # do stuff
  end
---
  if conditional || conditional   # ---OR--- #
    # do stuff
  end
---
# ---Parentheses and Precendence--- #
Examples:
  if (conditional && conditional) || conditional
    # do stuff
  end
---
# ---Nested If Statements--- #
Example:
  if conditional
    if conditional #2
     # do stuff
    elseif conditional
      # do stuff
    elseif conditional
      # do stuff
    end
  end

  # ---.respond_to?--- #
  Example:
    num = 10000
    p num.respond_to?("next")   # ---does this object respond to method--- #
     -> true
---
    p num.respond_to?("length") -> false
    p num.respond_to?(:length)  -> same result
---
# ---Ternary operator--- #
Example:
  condition to evaluate ? "Result if True": "Result if False"
  puts 1 < 2 ? "Yes" : "Nope"

# ---Default or Operational Parameters--- #
Example:
  def make_phone_call(number, international_code = 1, area_code = 415)
    # do stuff                               # ---default vaules--- #
  end

# ---Call methods--- #
Example:
    def add(a, b)
      a + b
    end

    def sub(a, b)
        a - b
    end

    def multiply(a,b)
          a*b
    end

    def calculator (a, b, operation ="add")
      if operation == "add"
        add (a,b)
      elseif operation == "subtract"
          subtract(a,b)
      elseif operation == "multiply"
            multiply(a,b)
      else
        "Wrong."
      end
    end

# ---Methods and Conditionals--- #
# ---Case--- #
Example:
  def rate_my_app(rating)
    case rating
    when "Awesome"
      # do stuff
    when "Meh"
      # do stuff
    when "Blows", "Sucks", "Crap"    # ---multiple criteria--- #
      # do stuff
   else
     # do something when all else fails
  end

  puts rate_my_app("Blows")
  ---

  def calc_grades(grade)    # ---range example--- #
    case grade
    when 90..100
      "A"
    when 80..89
      "B"
    when 70..79
      "C"
    else
    "F"
  end
end
# ---refactored code--- #
def calc_grades(grade)    # ---range example--- #
  case grade
  when 90..100  then "A"
  when 80..89   then "B"
  when 70..79   then "C"
  else "F"
  end
end

# ---Negation witn !--- #  # ---NOT--- #
Example:
  !true = False
  !!false = false

# ---unless Keyword--- #
Example:
    unless password =="booger"  # ---execute if False--- #
      puts "Denied!"
    else
      puts "Allowed"
    end

# ---while--- #
Example:
  i =1
  while i < 10
    # do stuff
    i += 1     # increment loop
  end

# ---until--- #
Example:
  i = 1
  until i > 9
    # do stuff
    i += i
  end

# ---Statement/Inline Modifiers--- #
Example:
      number = 5000
      puts "Yuuuge!" if number > 2500   # ---refactored IF statement--- #
      puts "Yuuuge!" if number > 2500 || conditional
      puts "No!" unless x >10

# ---Conditional Assignment--- #
Example:
  y =nil
  y ||=5 -> y is assigned 5 since first y value is nil
  ---
  y =5
  y||=10 -> fails since first value of y is not nil
<<<<<<< HEAD

# ---Ranges--- #
Example:
  nums = 1..5  # ---contains all objects within range, including last value-- #
  nums = 1...5 # 5 is excluded (3 dots)
  nums.first  = 1
  nums.last = 5  # ---regardless of ... dots--- #
  nums.first(4) = 1, 2, 3, 4
  nums.last(1) = 5

# ---Alphabetical Ranges--- #
Example:
    puts 1..10.first(3) -> throws error
    puts (1..10).first(3) -> works
    ---
    alphabet ="a".."z"
    puts alphabet.first(5)

# ---.size Method---#
Example:
  numbers =144..665
  p numbers.size = total number of elements in Range including last number

  --
  numbers = 23...78
  p numbers.size = total will exclude last number in range

# --Check value exists in Range with .include? Method--- #
Example:
    dataset ="a".."m"
    dataset.include?("g") = True   # ---remember the dots--- #
    ---
    dataset = -14..56
    dataset.include?(88) = false

# ---Random number generation--- #
Example:
  rand.round(x)   # ---rounds to x (e.g. 2) decimal places--- #
  rand(100) = 0 to 99, not 100
  rand(50..60) = 50 to 60
  rand (0...100) = 0 to 99

# ---Arrays--- #
Example:
    []  # ---syntax--- #
    [].class = array
    numbers =[2, 4, 6, 8, 9]
    puts numbers
    p numbers
    print numbers
    ---
    toys =["GI joe", "Star Wars", "Clue"]
    stuff =[ 6, "dirt", -234.3, "nerfherder"]
    ---
    # ---arrays within arrays--- #
    students =[ ["sam", "dave","hera"], ["jyn", "sabine", "cara"]]
    ---
    names = %w[]   # ---no quotes or commas needed---#
    names = %w[HAL, Friday, Jarvis]
    ---
    Array.new # ---creates new array--- #
    Array.new(5)  # ---total number of items in array--- #
    Array.new(10, true)   # ---2nd argument = initial value--- #
    ---
# ---index positions--- #
Example:
      <array>.length = total number of elements in arrays
      fruits.length     # ---indexes start at 0--- #
      fruits[5]         # ---retrieves element at index 5--- #
      fruits[fruits.length -1]  # ---retrieve last element--- #
      fruits[-1]  # ---start from end of array, x = index from last--- #
---
# ---.fetch Method--- #
Example:
  names.fetch(2)
  names.fetch(100)   # ---will throw error if doesn't exist---#
  names.fetch(100, "You failed")    # ---default value if fetch failed--- #
# ---extract sequential items from array--- #
Example:
    numbers = [4,7,2,77,0,2,4]
    numbers[2, 4]   # ---start at 2, pull out 4 elements; creates new array--- #
    numbers[4, 100] # ---will stop if not enough elements--- #
    numbers[3..6]  # ---start/finish indexes inclusive--- #
    numbers[3...6] # ---start/finish indexes non-inclusive--- #

# ---Access Multiple Arrays with .values_at--- #
Example:
  channels.values_at(4)       # ---pull out elements at index--- #
  channels.values_at(0, 2, 4) # ---non-sequential index--- #

# ---.slice Method--- #
Example:
    numbers.slice(3)   # ---extract element at index--- #
    numbers.slice(2, 3)
    numbers(4..8)
    numbers(3...6)

# ---mutate arrays--- #
Example:
  fruits[1] ="strawberry"   # ---replace element value at index--- #

# ---.length, .size, .count Methods--- #
Example:
